"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from transformation_t import transformation_t

class transformation_group(object):
    __slots__ = ["num_of_actor", "transformation"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.num_of_actor = 0
        self.transformation = []

    def encode(self):
        buf = BytesIO()
        buf.write(transformation_group._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_of_actor))
        for i0 in range(self.num_of_actor):
            assert self.transformation[i0]._get_packed_fingerprint() == transformation_t._get_packed_fingerprint()
            self.transformation[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != transformation_group._get_packed_fingerprint():
            raise ValueError("Decode error")
        return transformation_group._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = transformation_group()
        self.num_of_actor = struct.unpack(">i", buf.read(4))[0]
        self.transformation = []
        for i0 in range(self.num_of_actor):
            self.transformation.append(transformation_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if transformation_group in parents: return 0
        newparents = parents + [transformation_group]
        tmphash = (0x227eb36b80725f6b+ transformation_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if transformation_group._packed_fingerprint is None:
            transformation_group._packed_fingerprint = struct.pack(">Q", transformation_group._get_hash_recursive([]))
        return transformation_group._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

